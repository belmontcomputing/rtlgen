#!/usr/bin/env python3
###############################################################################
# rtlgen.py command line example:
#
#   % rtlgen.py bci:ip:mtx:1.0
#
# It generates output at $PWD.
###############################################################################

import sys
import os


def parse_args():
    # Parse the two cmdln args: vlnv, output directory.
    if len(sys.argv) != 2:
        print('ERROR: Incorrect number of arguments given to rtlgen command.')
        sys.exit(1)
    return sys.argv[1]


def parse_vlnv_from_yml(f):
    try:
        print(f'\n opening input YML {f} ...\n', flush=True)
        fh = open(f, 'r')
        text = fh.read()
        fh.close()
    except Exception as e:
        print(f'ERROR: Encounter error when loading {f}: {str(e)}')
        sys.exit(2)

    for line in text.split('\n'):
        if line[0:6] == 'vlnv: ':
            return line[6:]

    print(f'ERROR: Failed to extract VLNV from {f}.')
    sys.exit(1)
    

def write_rtl_files(vlnv, outdir):
    def write_dummy_file(outdir, name):
        f = os.path.join(outdir, f'{name}.sv')
        try:
            fh = open(f, 'w')
            fh.write('// This is a dummy System Verilog file.\n')
            fh.write('// Automatically generated by Rtlgen.\n\n')
            fh.write(f'module {name}();\n')
            fh.write(f'endmodule\n\n')
            fh.close()
        except Exception as e:
            print(f'ERROR: Encounter error when generating output {f}: {str(e)}')
            sys.exit(2)

    tokens = vlnv.split(':')
    write_dummy_file(outdir, tokens[2] + '_csr')
    write_dummy_file(outdir, tokens[2] + '_irq')


def write_core_file(vlnv, outdir):
    
    tokens = vlnv.split(':')
    f = os.path.join(outdir, '_'.join(tokens) + '.core')
    try:
        fh = open(f, 'w')
        fh.write('CAPI=2:\n\n')
        fh.write('# Automatically generated by Rtlgen.\n\n')
        fh.write(f'name: {vlnv}\n\n')
        fh.write('filesets:\n')
        fh.write('   files_rtl:\n')
        fh.write('      files:\n')
        fh.write(f'         - {tokens[2]}_csr.sv\n')
        fh.write(f'         - {tokens[2]}_irq.sv\n')
        fh.write('      file_type: systemVerilogSource\n\n')
        fh.write('targets:\n')
        fh.write('   default:\n')
        fh.write('      filesets:\n')
        fh.write('         - files_rtl\n\n')
        fh.close()
    except Exception as e:
        print(f'ERROR: Encounter error when generating output {f}: {str(e)}')
        sys.exit(2)


def main():
    input_yml = parse_args()
    vlnv = parse_vlnv_from_yml(input_yml)
    
    write_rtl_files(vlnv, '.')
    write_core_file(vlnv, '.')


if __name__ == '__main__':
    main()
